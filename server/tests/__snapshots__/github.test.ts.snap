// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`github integration: bootstraps configuraiton 1`] = `
Object {
  "0": "dist
node_modules

.DS_Store
*.log*",
  "1": "# LabelSync TypeScript configuration.

Hey there! Welcome to LabelSync. We have scaffolded the configuration file for you. Check it out!

### Setting up LabelSync

1. Create a repository on Github and name it \`config-labelsync\`.
1. Commit your configuration (this repository) to Github.
1. Head over to [LabelSync Manager Github Application](https://github.com/apps/labelsync-manager) and make sure that you install it in all repositories that you have configured.

### LabelSync library cheat sheet

**Methods:**

- \`labelsync\`: used as a configuration entry point. Outputs yaml version of your configuration to the root of your repository.
- \`repo\`: used to configure a single repository
- \`label\`: used to create a single label

**Presets:**

Check out \`colors\` property with a set of common colors for labels, and \`type\`, \`note\`, \`impact\`, \`effort\`, \`needs\`, \`scope\` and \`communtiy\` label templates to get up to speed more quickly. Label templates all prepend their name to the name of your label and already pack a nice color of our choosing.

\`\`\`ts
function labelsync({
  /* Repositories represent a repo-name:config dictionary */
  repos: { [repo: string]: Repository }
}): Configuration

/* Repo */
function repo({
  config?: {
    /* removes unconfigured labels from repository to keep it clean */
    removeUnconfiguredLabels?: boolean
  }
  /* list of labels that we get using label method below */
  labels: Label[]
})

/* Label */
function label(name: string, color: string)
function label({
  /* name of the label */
  name: string
  /* color in hex format */
  color: string
  description?: string
  /* old names of this label */
  alias?: string[]
  /* siblings of the label */
  siblings?: string[]
})
\`\`\`
",
  "2": "import { labelsync, repo } from \\"label-sync\\";

/* Repository */
import { prisma } from \\"./repos/prisma\\";
import { github } from \\"./repos/github\\";

/* Config */
labelsync({
  repos: {
    /* Check presets in the repos folder. */
    // prisma,
    // github,
    /* Personalized repositories */
    labelsync: repo({
      config: {
        removeUnconfiguredLabels: false,
      },
      labels: [],
    }),
  },
});
",
  "3": "repos: {}
",
  "4": "{
  \\"name\\": \\"config-labelsync\\",
  \\"private\\": true,
  \\"main\\": \\"index.js\\",
  \\"scripts\\": {
    \\"make\\": \\"ts-node labelsync.ts\\"
  },
  \\"dependencies\\": {
    \\"husky\\": \\"latest\\",
    \\"label-sync\\": \\"latest\\"
  },
  \\"devDependencies\\": {
    \\"prettier\\": \\"*\\",
    \\"ts-node\\": \\"*\\",
    \\"typescript\\": \\"*\\"
  },
  \\"husky\\": {
    \\"hooks\\": {
      \\"pre-commit\\": \\"yarn -s make && git add labelsync.yml\\"
    }
  },
  \\"prettier\\": {
    \\"semi\\": false,
    \\"singleQuote\\": true,
    \\"trailingComma\\": \\"all\\",
    \\"printWidth\\": 100
  },
  \\"license\\": \\"MIT\\"
}
",
  "5": "{
  \\"compilerOptions\\": {
    \\"target\\": \\"es2017\\",
    \\"module\\": \\"commonjs\\",
    \\"rootDir\\": \\".\\"
  }
}
",
  "6": "import { repo, label } from \\"label-sync\\";

/**
 * Default collection of label in a Github repository.
 */
export const github = repo({
  config: {
    removeUnconfiguredLabels: false,
  },
  labels: [
    label({
      name: \\"bug\\",
      color: \\"#d73a4a\\",
      description: \\"Something isn't working\\",
    }),
    label({
      name: \\"documentation\\",
      color: \\"#0075ca\\",
      description: \\"Improvements or additions to documentation\\",
    }),
    label({
      name: \\"duplicate\\",
      color: \\"#cfd3d7\\",
      description: \\"This issue or pull request already exists\\",
    }),
    label({
      name: \\"enhancement\\",
      color: \\"#a2eeef\\",
      description: \\"New feature or request\\",
    }),
    label({
      name: \\"good first issue\\",
      color: \\"#7057ff\\",
      description: \\"Good for newcomers\\",
    }),
    label({
      name: \\"help wanted\\",
      color: \\"#008672\\",
      description: \\"Extra attention is needed\\",
    }),
    label({
      name: \\"invalid\\",
      color: \\"#e4e669\\",
      description: \\"This doesn't seem right\\",
    }),
    label({
      name: \\"question\\",
      color: \\"#d876e3\\",
      description: \\"Further information is requested\\",
    }),
    label({
      name: \\"wontfix\\",
      color: \\"#000000\\",
      description: \\"This will not be worked on\\",
    }),
  ],
});
",
  "7": "import { repo, label, colors } from \\"label-sync\\";

/**
 * Label configuration used internally by Prisma team. Labels are grouped
 * by their intention (e.g. bug/*, kind/*, process/*) and give
 * great base for issue triaging.
 */

export const prisma = repo({
  config: {
    removeUnconfiguredLabels: false,
  },
  labels: [
    /* Bugs */
    label({
      name: \\"bug/0-needs-info\\",
      color: colors.danger,
      description: \\"More information is needed for reproduction.\\",
    }),
    label({
      name: \\"bug/1-repro-available\\",
      color: colors.danger,
      description: \\"A reproduction exists and needs to be confirmed.\\",
    }),
    label({
      name: \\"bug/2-confirmed\\",
      color: colors.danger,
      description: \\"We have confirmed that this is a bug.\\",
    }),
    /* Kind */
    label({
      name: \\"kind/bug\\",
      color: colors.neutral,
      description: \\"A reported bug.\\",
    }),
    label({
      name: \\"kind/regression\\",
      color: colors.neutral,
      description: \\"A reported bug in functionality that used to work before.\\",
    }),
    label({
      name: \\"kind/feature\\",
      color: colors.neutral,
      description: \\"A request for a new feature.\\",
    }),
    label({
      name: \\"kind/improvement\\",
      color: colors.neutral,
      description: \\"An improvement to existing feature and code.\\",
    }),
    label({
      name: \\"kind/docs\\",
      color: colors.neutral,
      description: \\"A documentation change is required.\\",
    }),
    label({
      name: \\"kind/discussion\\",
      color: colors.neutral,
      description: \\"Discussion is required.\\",
    }),
    label({
      name: \\"kind/question\\",
      color: colors.neutral,
      description: \\"Developer asked a question. No code changes required.\\",
    }),
    /* Process triaging. */
    label({
      name: \\"process/candidate\\",
      color: colors.shiny,
      description: \\"Candidate for next Milestone.\\",
    }),
    label({
      name: \\"process/next-milestone\\",
      color: colors.shiny,
      description: \\"Issue earmarked for next Milestone.\\",
    }),
    label({
      name: \\"process/product\\",
      color: colors.shiny,
      description:
        \\"Temporary label to export products issues from the Engineering process\\",
    }),
  ],
});
",
}
`;

exports[`github integration: bootstraps configuraiton 2`] = `
Object {
  "0": Array [
    Object {
      "mode": "100644",
      "path": "github.ts",
      "sha": 6,
      "type": "blob",
    },
    Object {
      "mode": "100644",
      "path": "prisma.ts",
      "sha": 7,
      "type": "blob",
    },
  ],
  "1": Array [
    Object {
      "mode": "040000",
      "path": "repos",
      "sha": 0,
      "type": "tree",
    },
    Object {
      "mode": "100644",
      "path": ".gitignore",
      "sha": 0,
      "type": "blob",
    },
    Object {
      "mode": "100644",
      "path": "README.md",
      "sha": 1,
      "type": "blob",
    },
    Object {
      "mode": "100644",
      "path": "labelsync.ts",
      "sha": 2,
      "type": "blob",
    },
    Object {
      "mode": "100644",
      "path": "labelsync.yml",
      "sha": 3,
      "type": "blob",
    },
    Object {
      "mode": "100644",
      "path": "package.json",
      "sha": 4,
      "type": "blob",
    },
    Object {
      "mode": "100644",
      "path": "tsconfig.json",
      "sha": 5,
      "type": "blob",
    },
  ],
}
`;
